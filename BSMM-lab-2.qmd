---
title: "BSMM-lab-2"
subtitle: "BSMM 8740 Fall 2023"
author: "sophia-yi"
date: "25 September"
format: html
editor: visual
self-contained: true
---

## Setup

Load packages and data:

```{r load-pkg-data}
#| message: false
the_tate <- readr::read_delim("data/the-tate-collection.csv", ";", escape_double = FALSE, trim_ws = TRUE)
the_tate_artists <- readr::read_csv("data/the-tate-artists.csv")
```

```{r}
library(magrittr)     # the pipe
library(tidyverse)    # for data wrangling + visualization
library(tidymodels)   # for modeling
library(gt)           # for making display tables
library(gtExtras)     # helper functions for beautiful tables
library(DataExplorer) #
```

```{r}
the_tate <- readr::read_delim("data/the-tate-collection.csv", ";", escape_double = FALSE, trim_ws = TRUE)
the_tate_artists <- readr::read_csv("data/the-tate-artists.csv")
```

```         
```

## Exercises

### Exercise 1

The `the_tate` dataset has 3336 unique artists who worked from 1545 to 2012. The works were acquired between the years1823 and 2013.

```{r}
the_tate |> dplyr::summarise(
  artist=length(unique(artist)),
  min_year=min(year,na.rm = TRUE),
  max_year=max(year,na.rm = TRUE),
    min_acqyear=min(acquisitionYear,na.rm = TRUE),
  max_acqyear=max(acquisitionYear,na.rm = TRUE),
  
)
```

```{r}
the_tate |> DataExplorer::introduce()
```

```{r}
the_tate |> DataExplorer::plot_missing()
```

### Exercise 2

How number of works with missing dates is \_2583\_.

The number of artists whose works have missing dates is \_461\_.

It would require resolving missing year data for only \_\_ artists resolve resolve at least 50% of the missing data.

The missing year data likely to be classified as \_MAR\_\_\_.

```{r}
the_tate |> dplyr::filter(is.na(year)) |> dplyr::distinct(title)
```

```{r}
the_tate |> dplyr::filter(is.na(year)) |> dplyr::distinct(artist)

```

```{r}
the_tate |> dplyr::filter(is.na(year))

#table(qaz$artist) |> tibble::tibble()
```

### Exercise 3

The artist with the most works in the Tate collection is \_Turner\_\_.

The artist with the tenth-most works in the Tate collection is \_Warhol\_\_.

```{r}
the_tate |> dplyr::group_by(artist) |>
dplyr::mutate(n=dplyr::n()) |>
  dplyr::select(artist,n) |> 
  dplyr::arrange(desc(n)) |>
  dplyr::distinct() |> 
  dplyr::ungroup() |> 
  dplyr::slice(c(1,10))
```

### Exercise 4

The artist with the greatest number of works in the Tate collection represent \_56.91970\_\_% of the total

```{r}
the_tate %>%
  dplyr::group_by(artist) %>%
  dplyr::mutate(works_count = dplyr::n()) %>%
  dplyr::select(artist, works_count) %>%
  dplyr::arrange(desc(works_count)) %>%
  dplyr::distinct() %>%
  dplyr::ungroup() %>%
  dplyr::mutate(
    total = sum(works_count),
    pct = works_count / total
  )
```

### Exercise 5

There are \_23705\_ duplicate artist-title pairs

```{r}
library(dplyr)

# Select artist and title columns and count the number of rows
count_all_rows <- the_tate %>%
  select(artist, title) %>%
  nrow()

count_all_rows
```

```{r}
# Select artist and title columns and count distinct pairs
distinct_artist_title <- the_tate %>%
  select(artist, title) %>%
  distinct() %>%
  nrow()

distinct_artist_title
```

```{r}
duplicated_count <- count_all_rows - distinct_artist_title

duplicated_count
```

### Exercise 6

The artist with the largest work in the tate collection is Therrien, Robert.

The artist with the smallest work in the collection is Mesens, E.L.T.. The smallest work has area \_237\_\_ cm.

```{r}
library(dplyr)

# Add a new column "area" with the calculated area
the_tate <- the_tate %>%
  mutate(area = width * height)

# Select artist, title, and area, and remove NA values
selected_data <- the_tate %>%
  select(artist, title, area) %>%
  drop_na()

# Order the works by area in ascending order
selected_data <- selected_data %>%
  arrange(area)

# Find the largest artwork
largest_artwork <- selected_data %>%
  slice_tail(n = 1)

# Find the smallest artwork
smallest_artwork <- selected_data %>%
  slice_head(n = 1)

# View the largest and smallest artworks
print("Largest Artwork:")
print(largest_artwork)

print("Smallest Artwork:")
print(smallest_artwork)

```

### Exercise 7

```{r}
library(dplyr)

# Left join the_tate and the_tate_artists
the_tate <- left_join(the_tate, the_tate_artists, by = c("artistId" = "id"))

# Drop rows with NA gender values
the_tate <- the_tate %>%
  filter(!is.na(gender))
# Group by gender
grouped_data <- the_tate %>%
  group_by(gender)

# Show the resulting table
grouped_data
```

### Exercise 8

The annual return in the SPX price in 2020 was \_-11.97\_\_%.

The corresponding price volatility was \_35.07\_\_%.

```{r}
library(readr)
library(dplyr)

# Read the historical price data with explicit date format
spx_data <- read_csv(
  "SPX_HistoricalData_1692322132002.csv",
  col_types = cols(
    Date = col_datetime(format = "%m/%d/%Y"),  # Adjust the format as needed
    `Close/Last` = col_double(),  # Use backticks for column name
    .default = col_double()
  )
)

# Add a column for the year of the transaction
spx_data <- spx_data %>%
  mutate(year = lubridate::year(Date))

# Add a column for daily return (rd) - Using backticks for column name
spx_data <- spx_data %>%
  mutate(rd = (`Close/Last` / lag(`Close/Last`)) - 1)

# Add a column for daily return variance
spx_data <- spx_data %>%
  mutate(return_variance = rd^2)

# Group by year and compute annual returns and standard deviations
annual_summary <- spx_data %>%
  group_by(year) %>%
  summarize(
    annual_return = prod(1 + rd) - 1,
    annual_std_dev = sqrt(sum(return_variance)),
    .groups = "drop"
  )

# Show the annual summary
annual_summary

```

### Exercise 9

The period volatility was \_\_\_\_%

```{r}
library(gt)

# Create a data frame containing year, annual return, and annual volatility
data <- data.frame(
  year = c(2018, 2019, 2020, 2021, 2022, 2023),
  annual_return = c(0.1354964, -0.2295440, -0.1196547, -0.2284783, 0.2542846, NA),
  annual_std_dev = c(0.1211806, 0.1260414, 0.3507352, 0.1309710, 0.2416677, NA)
)

# Calculate the period volatility (standard deviation)
period_variance <- sum(data$annual_std_dev^2, na.rm = TRUE)
period_volatility <- sqrt(period_variance)

# Create a gt table
table <- gt(data) %>%
  tab_header(
    title = "SPX Price Summary",
    subtitle = "Annual Returns and Volatility (2018-2023)"
  ) %>%
  cols_label(
    year = "Year",
    annual_return = "Annual Return (%)",
    annual_std_dev = "Annual Volatility (%)"
  ) %>%
  fmt_number(
    columns = c("annual_return", "annual_std_dev"),
    decimals = 2
  ) %>%
  summary_rows(
    groups = TRUE,
    columns = c(annual_return, annual_std_dev),
    fns = list("Period Return" = sum(annual_return, na.rm = TRUE), "Period Volatility" = period_volatility)
  )

# Print the formatted table
print(table)


```

### 
